import datetimeimport pymongoimport jsonimport time# This script takes the data from the tweets collection for the categories for which we have to# plug the bot detection system. It extracts tweet data from tweets collection.def fill_bot(cat, tweets, targetDB):    print 'Filling the bot detection collection for category ' + str(cat)    t0 = time.time()    for twt in tweets:        if twt.get('user').get('id'):            if targetDB.botuserlabels.find({'user_id': twt['user']['id'], 'cat': twt['cat']}).count() > 0:                record = targetDB.botuserlabels.find_one(                    {'user_id': twt['user']['id'], 'cat': twt['cat']})                catime_arr = set(record['catime'])                catime_arr.add(twt['catime'])                catime_arr = list(catime_arr)                targetDB.botuserlabels.update({'user_id': twt['user']['id'], 'cat': twt['cat']},                                              {'$set': {'catime': catime_arr, 'num_of_tweets': len(catime_arr)}})            else:                catime_arr = [twt['catime']]                targetDB.botuserlabels.insert(                    {'user_name': twt['user']['screen_name'], 'user_id': twt['user']['id'], 'catime': catime_arr,                     'num_of_tweets': len(catime_arr), 'cat': twt['cat']})    print 'Time taken to fill the bot collection for catID ' + str(cat) + ' is: ' + str(time.time() - t0)    return Truedef query_tweets_collection(cat, start_time, end_time, sourceDB):    shard_1_gt = long(str(cat) + str(start_time))    shard_1_lt = long(str(cat) + str(end_time))    shard_2_gt = long('333' + str(cat) + str(start_time))    shard_2_lt = long('333' + str(cat) + str(end_time))    shard_3_gt = long('666' + str(cat) + str(start_time))    shard_3_lt = long('666' + str(cat) + str(end_time))    print 'Getting tweets for categoryID: ' + str(cat)    query = {"$or": [{"catime": {"$lte": shard_1_lt, "$gte": shard_1_gt}}, {"catime": {        "$lte": shard_2_lt, "$gte": shard_2_gt}}, {"catime": {"$lte": shard_3_lt, "$gte": shard_3_gt}}]}    print str(query)    result = sourceDB.tweets.find(query)    count = sourceDB.tweets.find(query).count()    print 'Got result for ' + str(cat) + ' category'    print 'No of tweets obtained for ' + str(cat) + ' is: ' + str(count)    return resultdef fill_botdetection_collection(cat, start_time, end_time, sourceDB, targetDB):    if cat == None:        return (False, 'Please pass the categoryID')    if start_time == None:        return (False, 'Please pass the start time')    if end_time == None:        return (False, 'Please pass the end_time')    if (start_time >= end_time):        return (False, 'start_time cannot be greater than end_time')    if sourceDB == None:        return (False, 'SourceDB must be specified')    if targetDB == None:        return (False, 'TargetDB must be specified')    start_time = int(start_time)    end_time = int(end_time)    tweets = query_tweets_collection(cat, start_time, end_time, sourceDB)    success = fill_bot(cat, tweets, targetDB)    return (success, 'Everything completed successfully')if __name__ == '__main__':    while True:        print datetime.date.today()        client = pymongo.MongoClient('localhost:27017')        # Set up source database        sourceDB = client['tweettracker']        #sourceDB.authenticate('twtuser', '!!!asudmml%%%')        # Set up target database        targetDB = client['ttsideprojects']        #targetDB.authenticate('twtuser', '!!!asudmml%%%')        end_time = time.time()        # start_time = time.time() - 24 * 60 * 60        start_time = 1356998400        cats = list()        for docs in sourceDB.categories.find({'includeincrawl': 1}):            print docs['categoryID']            cats.append(docs['categoryID'])        cats = [1, 2, 3, 4, 5, 6]        for cat in cats:            # try:            success, msg = fill_botdetection_collection(                cat, start_time, end_time, sourceDB, targetDB)            print success, msg            # except Exception as e:            #     print e        time.sleep(43200)  # Wait for 12 hour before running again